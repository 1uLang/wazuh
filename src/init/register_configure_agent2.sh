#!/bin/bash

# Copyright (C) 2015-2020, Wazuh Inc.
# March 6, 2019.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

INSTALLDIR=${1}
sed="sed -ri"
# By default, use gnu sed (gsed).
use_unix_sed="False"

unix_sed() {
    sed_expression="$1"
    target_file="$2"

    sed "${sed_expression}" "${target_file}" > "${target_file}.tmp"
    cat "${target_file}.tmp" > "${target_file}"
    rm "${target_file}.tmp"
}

edit_value_tag() {
    if [ "$#" == "2" ] && [ ! -z "$2" ]; then
        if [ "${use_unix_sed}" = "False" ] ; then
            ${sed} "s#<$1>.*</$1>#<$1>$2</$1>#g" "${INSTALLDIR}/etc/ossec.conf"
        else
            unix_sed "s#<$1>.*</$1>#<$1>$2</$1>#g" "${INSTALLDIR}/etc/ossec.conf"
        fi
    fi

    if [ "$?" != "0" ]; then
        echo "$(date '+%Y/%m/%d %H:%M:%S') agent-auth: Error updating $2 with variable $1." >> ${INSTALLDIR}/logs/ossec.log
    fi
}

add_adress_block() {

    SET_ADDRESSES=("$@")

    # Remove the server configuration
    if [ "${use_unix_sed}" = "False" ] ; then
        ${sed} "/<server>/,/\/server>/d" ${INSTALLDIR}/etc/ossec.conf
    else
        unix_sed "/<server>/,/\/server>/d" "${INSTALLDIR}/etc/ossec.conf"
    fi

    # Get the client configuration generated by gen_ossec.sh
    start_config="$(grep -n "<client>" ${INSTALLDIR}/etc/ossec.conf | cut -d':' -f 1)"
    end_config="$(grep -n "</client>" ${INSTALLDIR}/etc/ossec.conf | cut -d':' -f 1)"
    start_config=$(( start_config + 1 ))
    end_config=$(( end_config - 1 ))
    client_config="$(sed -n "${start_config},${end_config}p" ${INSTALLDIR}/etc/ossec.conf)"

    # Remove the client configuration
    if [ "${use_unix_sed}" = "False" ] ; then
        ${sed} "/<client>/,/\/client>/d" ${INSTALLDIR}/etc/ossec.conf
    else
        unix_sed "/<client>/,/\/client>/d" "${INSTALLDIR}/etc/ossec.conf"
    fi

    # Write the client configuration block
    echo "<ossec_config>" >> ${INSTALLDIR}/etc/ossec.conf
    echo "  <client>" >> ${INSTALLDIR}/etc/ossec.conf
    for i in "${SET_ADDRESSES[@]}";
    do
        echo "    <server>" >> ${INSTALLDIR}/etc/ossec.conf
        echo "      <address>$i</address>" >> ${INSTALLDIR}/etc/ossec.conf
        echo "      <port>1514</port>" >> ${INSTALLDIR}/etc/ossec.conf
        echo "      <protocol>tcp</protocol>" >> ${INSTALLDIR}/etc/ossec.conf
        echo "    </server>" >> ${INSTALLDIR}/etc/ossec.conf
    done

    echo "${client_config}" >> ${INSTALLDIR}/etc/ossec.conf
    echo "  </client>" >> ${INSTALLDIR}/etc/ossec.conf
    echo "</ossec_config>" >> ${INSTALLDIR}/etc/ossec.conf
}

add_parameter () {
    if [ ! -z "$3" ]; then
        OPTIONS="$1 $2 $3"
    fi
    echo ${OPTIONS}
}

get_deprecated_vars () {
    if [ ! -z "${HIDS_MANAGER_IP}" ] && [ -z "${HIDS_MANAGER}" ]; then
        HIDS_MANAGER=${HIDS_MANAGER_IP}
    fi
    if [ ! -z "${HIDS_AUTHD_SERVER}" ] && [ -z "${HIDS_REGISTRATION_SERVER}" ]; then
        HIDS_REGISTRATION_SERVER=${HIDS_AUTHD_SERVER}
    fi
    if [ ! -z "${HIDS_AUTHD_PORT}" ] && [ -z "${HIDS_REGISTRATION_PORT}" ]; then
        HIDS_REGISTRATION_PORT=${HIDS_AUTHD_PORT}
    fi
    if [ ! -z "${HIDS_PASSWORD}" ] && [ -z "${HIDS_REGISTRATION_PASSWORD}" ]; then
        HIDS_REGISTRATION_PASSWORD=${HIDS_PASSWORD}
    fi
    if [ ! -z "${HIDS_NOTIFY_TIME}" ] && [ -z "${HIDS_KEEP_ALIVE_INTERVAL}" ]; then
        HIDS_KEEP_ALIVE_INTERVAL=${HIDS_NOTIFY_TIME}
    fi
    if [ ! -z "${HIDS_CERTIFICATE}" ] && [ -z "${HIDS_REGISTRATION_CA}" ]; then
        HIDS_REGISTRATION_CA=${HIDS_CERTIFICATE}
    fi
    if [ ! -z "${HIDS_PEM}" ] && [ -z "${HIDS_REGISTRATION_CERTIFICATE}" ]; then
        HIDS_REGISTRATION_CERTIFICATE=${HIDS_PEM}
    fi
    if [ ! -z "${HIDS_KEY}" ] && [ -z "${HIDS_REGISTRATION_KEY}" ]; then
        HIDS_REGISTRATION_KEY=${HIDS_KEY}
    fi
    if [ ! -z "${HIDS_GROUP}" ] && [ -z "${HIDS_AGENT_GROUP}" ]; then
        HIDS_AGENT_GROUP=${HIDS_GROUP}
    fi
}

set_vars () {
    export HIDS_MANAGER=$(launchctl getenv HIDS_MANAGER)
    export HIDS_MANAGER_PORT=$(launchctl getenv HIDS_MANAGER_PORT)
    export HIDS_PROTOCOL=$(launchctl getenv HIDS_PROTOCOL)
    export HIDS_REGISTRATION_SERVER=$(launchctl getenv HIDS_REGISTRATION_SERVER)
    export HIDS_REGISTRATION_PORT=$(launchctl getenv HIDS_REGISTRATION_PORT)
    export HIDS_REGISTRATION_PASSWORD=$(launchctl getenv HIDS_REGISTRATION_PASSWORD)
    export HIDS_KEEP_ALIVE_INTERVAL=$(launchctl getenv HIDS_KEEP_ALIVE_INTERVAL)
    export HIDS_TIME_RECONNECT=$(launchctl getenv HIDS_TIME_RECONNECT)
    export HIDS_REGISTRATION_CA=$(launchctl getenv HIDS_REGISTRATION_CA)
    export HIDS_REGISTRATION_CERTIFICATE=$(launchctl getenv HIDS_REGISTRATION_CERTIFICATE)
    export HIDS_REGISTRATION_KEY=$(launchctl getenv HIDS_REGISTRATION_KEY)
    export HIDS_AGENT_NAME=$(launchctl getenv HIDS_AGENT_NAME)
    export HIDS_AGENT_GROUP=$(launchctl getenv HIDS_AGENT_GROUP)

    # The following variables are yet supported but all of them are deprecated
    export HIDS_MANAGER_IP=$(launchctl getenv HIDS_MANAGER_IP)
    export HIDS_NOTIFY_TIME=$(launchctl getenv HIDS_NOTIFY_TIME)
    export HIDS_AUTHD_SERVER=$(launchctl getenv HIDS_AUTHD_SERVER)
    export HIDS_AUTHD_PORT=$(launchctl getenv HIDS_AUTHD_PORT)
    export HIDS_PASSWORD=$(launchctl getenv HIDS_PASSWORD)
    export HIDS_GROUP=$(launchctl getenv HIDS_GROUP)
    export HIDS_CERTIFICATE=$(launchctl getenv HIDS_CERTIFICATE)
    export HIDS_KEY=$(launchctl getenv HIDS_KEY)
    export HIDS_PEM=$(launchctl getenv HIDS_PEM)
}

unset_vars() {

    OS=$1

    vars=(HIDS_MANAGER_IP HIDS_PROTOCOL HIDS_MANAGER_PORT HIDS_NOTIFY_TIME \
          HIDS_TIME_RECONNECT HIDS_AUTHD_SERVER HIDS_AUTHD_PORT HIDS_PASSWORD \
          HIDS_AGENT_NAME HIDS_GROUP HIDS_CERTIFICATE HIDS_KEY HIDS_PEM \
          HIDS_MANAGER HIDS_REGISTRATION_SERVER HIDS_REGISTRATION_PORT \
          HIDS_REGISTRATION_PASSWORD HIDS_KEEP_ALIVE_INTERVAL HIDS_REGISTRATION_CA \
          HIDS_REGISTRATION_CERTIFICATE HIDS_REGISTRATION_KEY HIDS_AGENT_GROUP)


    for var in "${vars[@]}"; do
        if [ "${OS}" = "Darwin" ]; then
            launchctl unsetenv ${var}
        fi
        unset ${var}
    done
}

tolower () {
   echo $1 | tr '[:upper:]' '[:lower:]'
}

main () {

    uname_s=$(uname -s)

    if [ "${uname_s}" = "Darwin" ]; then
        sed="sed -ire"
        set_vars
    elif [ "${uname_s}" = "AIX" ] || [ "${uname_s}" = "SunOS" ] || [ "${uname_s}" = "HP-UX" ]; then
        use_unix_sed="True"
    fi

    get_deprecated_vars

    if [ ! -s ${INSTALLDIR}/etc/client.keys ] && [ ! -z ${HIDS_MANAGER} ]; then
        if [ ! -f ${INSTALLDIR}/logs/ossec.log ]; then
            touch -f ${INSTALLDIR}/logs/ossec.log
            chmod 660 ${INSTALLDIR}/logs/ossec.log
            chown root:ossec ${INSTALLDIR}/logs/ossec.log
        fi

        # Check if multiples IPs are defined in variable HIDS_MANAGER
        HIDS_MANAGER=$(echo ${HIDS_MANAGER} | sed "s#,#;#g")
        ADDRESSES=(${HIDS_MANAGER//;/ })
        if [ ${#ADDRESSES[@]} -gt 1 ]; then
            # Get uniques values
            ADDRESSES=($(echo "${ADDRESSES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            add_adress_block "${ADDRESSES[@]}"
            if [ -z ${HIDS_REGISTRATION_SERVER} ]; then
                HIDS_REGISTRATION_SERVER=${ADDRESSES[0]}
            fi
        else
            # Single address
            edit_value_tag "address" ${HIDS_MANAGER}
            if [ -z ${HIDS_REGISTRATION_SERVER} ]; then
                HIDS_REGISTRATION_SERVER=${HIDS_MANAGER}
            fi
        fi

        # Options to be modified in ossec.conf
        edit_value_tag "protocol" "$(tolower ${HIDS_PROTOCOL})"
        edit_value_tag "port" ${HIDS_MANAGER_PORT}
        edit_value_tag "notify_time" ${HIDS_KEEP_ALIVE_INTERVAL}
        edit_value_tag "time-reconnect" ${HIDS_TIME_RECONNECT}

    elif [ -s ${INSTALLDIR}/etc/client.keys ] && [ ! -z ${HIDS_MANAGER} ]; then
        echo "$(date '+%Y/%m/%d %H:%M:%S') agent-auth: ERROR: The agent is already registered." >> ${INSTALLDIR}/logs/ossec.log
    fi

    if [ ! -s ${INSTALLDIR}/etc/client.keys ] && [ ! -z ${HIDS_REGISTRATION_SERVER} ]; then
        # Options to be used in register time.
        OPTIONS="-m ${HIDS_REGISTRATION_SERVER}"
        OPTIONS=$(add_parameter "${OPTIONS}" "-p" "${HIDS_REGISTRATION_PORT}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-P" "${HIDS_REGISTRATION_PASSWORD}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-A" "${HIDS_AGENT_NAME}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-G" "${HIDS_AGENT_GROUP}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-v" "${HIDS_REGISTRATION_CA}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-k" "${HIDS_REGISTRATION_KEY}")
        OPTIONS=$(add_parameter "${OPTIONS}" "-x" "${HIDS_REGISTRATION_CERTIFICATE}")
        ${INSTALLDIR}/bin/agent-auth ${OPTIONS} >> ${INSTALLDIR}/logs/ossec.log 2>/dev/null
    fi

    unset_vars ${uname_s}
}

main
